/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package autonomouspathplanner.GUI;

import autonomouspathplanner.GUI.objects.GUIObject;
import autonomouspathplanner.GUI.objects.SmoothLine;
import autonomouspathplanner.GUI.objects.StraightLine;
import java.awt.Point;

/**
 * Helper class that displays UI to insert lines in the middle of an autonomous path.
 * @author Alex
 */
public class InsertLine extends javax.swing.JFrame {
    public AutoPathCanvas canv;
    public int lowerIndex;
    public int upperIndex;
    public boolean first;
    
    /**
     * Creates new form InsertLine
     */
    public InsertLine() {
        initComponents();
    }
    
    /**
     * Creates the form to insert a line, given the AutoPathCanvas where the line is to be inserted.
     * This class assumes that the line is to be inserted at a point.
     * By default this assumes that the point is not the first point of the path.
     * @param canv the canvas that the line is going to be inserted on
     * @param lowerIndex the index of the line immediately before the point where the insertion is to happen
     * @param upperIndex the index of the line immediately after the point where the insertion is to happen
     */
    public InsertLine(AutoPathCanvas canv, int lowerIndex, int upperIndex) {
        initComponents();
        this.canv = canv;
        this.lowerIndex = lowerIndex;
        this.upperIndex = upperIndex;
        first = false;
    }
    /**
     * Creates the form to insert a line, given the AutoPathCanvas where the line is to be inserted.
     * This class assumes that the line is to be inserted at a point..
     * @param canv the canvas that the line is going to be inserted on
     * @param lowerIndex the index of the line immediately before the point where the insertion is to happen
     * @param upperIndex the index of the line immediately after the point where the insertion is to happen
     * @param firstLine is this point the first point on the first line?
     */
    public InsertLine(AutoPathCanvas canv, int lowerIndex, int upperIndex, boolean firstLine)
    {
        initComponents();
        this.canv = canv;
        this.lowerIndex = lowerIndex;
        this.upperIndex = upperIndex;
        first = firstLine;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        SmoothvsStraight = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        Smooth = new javax.swing.JRadioButton();
        Straight = new javax.swing.JRadioButton();
        no = new javax.swing.JRadioButton();
        jButton1 = new javax.swing.JButton();
        numSeg = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        ERROR = new javax.swing.JLabel();
        ERROR2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setAlwaysOnTop(true);

        jLabel1.setText("Would you Like to Add another Line at this intersection?");

        SmoothvsStraight.add(Smooth);
        Smooth.setText("Yes. I would like to add a Smooth Line");
        Smooth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SmoothActionPerformed(evt);
            }
        });

        SmoothvsStraight.add(Straight);
        Straight.setText("Yes. I would like to add a Straight Line");
        Straight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StraightActionPerformed(evt);
            }
        });

        SmoothvsStraight.add(no);
        no.setText("NO GO AWAY");
        no.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noActionPerformed(evt);
            }
        });

        jButton1.setText("OK");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        numSeg.setText("1");

        jLabel2.setText("Number of line segments");

        ERROR2.setText("PLEASE SELECT AN OPTION");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(72, 72, 72)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Straight)
                            .addComponent(Smooth)
                            .addComponent(no)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(numSeg, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ERROR, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(174, 174, 174)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(119, 119, 119)
                        .addComponent(ERROR2)))
                .addContainerGap(58, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(Smooth)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Straight)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(no)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(numSeg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ERROR))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ERROR2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Switch around what is visible to match the display we wish to have while trying to create a smooth line
     * @param evt 
     */
    private void SmoothActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SmoothActionPerformed
        jLabel2.setVisible(true);
        numSeg.setVisible(true);
        ERROR.setVisible(false);
        ERROR2.setVisible(false);
    }//GEN-LAST:event_SmoothActionPerformed
    /**
     * Switch around what is visible to match the display we wish to have while trying to create a straight line
     * @param evt 
     */
    private void StraightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StraightActionPerformed
        jLabel2.setVisible(false);
        numSeg.setVisible(false);
        ERROR.setVisible(false);
        ERROR2.setVisible(false);
    }//GEN-LAST:event_StraightActionPerformed
    /**
     * Switch around what is visible to match the display we wish to have while trying to do nothing
     * @param evt 
     */
    private void noActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noActionPerformed
        jLabel2.setVisible(false);
        numSeg.setVisible(false);
        ERROR.setVisible(false);
        ERROR2.setVisible(false);
    }//GEN-LAST:event_noActionPerformed

    /**
     * Hey look! The user wants to create a line! Let's just make sure he/she didn't screw up and then send this stuff back
     * @param evt 
     */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        GUIObject obj = canv.objs.get(lowerIndex);
        if(first)
        {
            System.out.println("FIRST");
            if(obj instanceof SmoothLine)
            {
                SmoothLine org = (SmoothLine)obj;
                upperIndex = lowerIndex;
                lowerIndex--;
                obj = new StraightLine();
                ((StraightLine)obj).finalPosition = new Point(org.coordinates.get(0));
            }
            else 
            {
                StraightLine org = (StraightLine)obj;
                upperIndex = lowerIndex;
                lowerIndex--;
                obj = new StraightLine();
                ((StraightLine)obj).finalPosition = new Point(org.initialPosition);
            }
        }
        if(Smooth.isSelected())
        {
            try{
                SmoothLine ln = new SmoothLine();
                int numPoints = Integer.parseInt(numSeg.getText()) + 1;
                Point init;
                if(obj instanceof SmoothLine)
                {
                    init = ((SmoothLine)obj).coordinates.get(((SmoothLine)obj).coordinates.size() - 1);
                }
                else
                {
                    init = new Point(((StraightLine)obj).finalPosition);
                }
                Point current = new Point(init);
                for(int i = 0; i<numPoints-1; i++)
                {
                    System.out.println(current.toString());
                    ln.coordinates.add(current);
                    if(i%2 == 0)
                    {
                        current = new Point(current.x + 45, current.y + 45);
                    }
                    else if(i%2 == 1)
                    {
                        current = new Point(current.x + 45, current.y - 45);
                    }
                }
                ln.coordinates.add(current);
                if(upperIndex != -1)
                {
                    if(canv.objs.get(upperIndex) instanceof SmoothLine)
                    {
                        ((SmoothLine)canv.objs.get(upperIndex)).coordinates.set(0, new Point(current));
                    }
                    else
                    {
                        ((StraightLine)canv.objs.get(upperIndex)).initialPosition.setLocation(current);
                    }
                }
                canv.objs.add(lowerIndex+1, ln);
                for(Point o : ln.coordinates)
                {
                    System.out.println(o.toString());
                }
                canv.repaint();
                dispose();
            }
            catch(Exception ex)
            {
                if(ex instanceof java.lang.NumberFormatException)
                {
                    ERROR.setVisible(true);
                    ERROR.setText("ERROR: Please enter a number");                   
                }
                else
                {
                    ERROR.setVisible(true);
                    ERROR.setText(ex.getClass().toString().substring(7));
                }
            }
        }
        else if(Straight.isSelected())
        {
            StraightLine ln = new StraightLine();
            Point init;
            if(obj instanceof SmoothLine)
            {
                init = ((SmoothLine)obj).coordinates.get(((SmoothLine)obj).coordinates.size() - 1);
            }
            else
            {
                init = new Point(((StraightLine)obj).finalPosition);
            }
            Point fin = new Point(init.x + 45, init.y + 45);
            
            ln.initialPosition.setLocation(init);
            ln.finalPosition.setLocation(fin);
            if(upperIndex != -1)
            {
                if(canv.objs.get(upperIndex) instanceof SmoothLine)
                {
                    ((SmoothLine)canv.objs.get(upperIndex)).coordinates.set(0, new Point(fin));
                }
                else
                {
                    ((StraightLine)canv.objs.get(upperIndex)).initialPosition.setLocation(fin);
                }
            }
            canv.objs.add(lowerIndex+1, ln);
            canv.repaint();
            dispose();
        }
        else if(no.isSelected())
        {
            dispose();
        }
        else
        {
            ERROR2.setVisible(true);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InsertLine.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InsertLine.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InsertLine.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InsertLine.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InsertLine().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ERROR;
    private javax.swing.JLabel ERROR2;
    private javax.swing.JRadioButton Smooth;
    private javax.swing.ButtonGroup SmoothvsStraight;
    private javax.swing.JRadioButton Straight;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JRadioButton no;
    private javax.swing.JTextField numSeg;
    // End of variables declaration//GEN-END:variables
}
