/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package autonomouspathplanner.GUI;

import autonomouspathplanner.GUI.objects.SmoothLine;
import java.awt.Point;

/**
 * The InsertSegments class provides a UI for the insertion of more segments in a SmoothLine
 * @author Alex
 */
public class InsertSegments extends javax.swing.JFrame {

    private AutoPathCanvas canv;
    private int SmoothLineIndex;
    private int pointIndex;
    /**
     * Creates new form InsertSegments
     */
    public InsertSegments() {
        initComponents();
    }
    
    /**
     * Creates a new form for inserting segments into the play represented by <code>canv</code>; specifically
     * in the SmoothLine represented by <code>SmthLineInd</code> and immediately after the point 
     * represented by <code>pointInd</code>
     * @param canv the AutoPathCanvas that contains the play to be modified.
     * @param SmthLineInd The index of the SmoothLine within the <code>objs</code> Array of <code>canv>/code>
     * @param pointInd the index of the point within the <code>coordinates</code> array of the smoothLine
     */
    public InsertSegments(AutoPathCanvas canv, int SmthLineInd, int pointInd)
    {
        initComponents();
        this.canv = canv;
        this.SmoothLineIndex = SmthLineInd;
        this.pointIndex = pointInd;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        num = new javax.swing.JTextField();
        plus = new javax.swing.JButton();
        minus = new javax.swing.JButton();
        okai = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("How Many line segments would you like to add?");

        num.setText("0");
        num.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numActionPerformed(evt);
            }
        });

        plus.setText("+");
        plus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                plusActionPerformed(evt);
            }
        });

        minus.setText("-");
        minus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minusActionPerformed(evt);
            }
        });

        okai.setText("OK");
        okai.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okaiActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(13, Short.MAX_VALUE)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(82, 82, 82)
                        .addComponent(num, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(okai)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(plus)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(minus)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(num, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(plus)
                    .addComponent(minus))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addComponent(okai)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * If the number of segments is changed, let's make sure that the user wasn't stupid and change it to something like "bananas"
     * @param evt 
     */
    private void numActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numActionPerformed
        try{
            int i = Integer.parseInt(num.getText());
            if(i <0)
            {
                num.setText("0");
            }
                    
        }
        catch(NumberFormatException nfex)
        {
            num.setText("0");
            
        }
    }//GEN-LAST:event_numActionPerformed

    /**
     * Add one to the current number
     * @param evt 
     */
    private void plusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_plusActionPerformed
        int current = Integer.parseInt(num.getText());
        current++;
        num.setText("" + current);
    }//GEN-LAST:event_plusActionPerformed

    /**
     * reduce the current number by 1
     * @param evt 
     */
    private void minusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minusActionPerformed
        int current = Integer.parseInt(num.getText());
        current--;
        if(current != 0)
        {
            num.setText("" + current);
        }
    }//GEN-LAST:event_minusActionPerformed

    /**
     * So the user now wants to add that number of segments. Let's make that happen.
     * @param evt 
     */
    private void okaiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okaiActionPerformed
        SmoothLine ln = (SmoothLine)canv.objs.get(SmoothLineIndex);
        
        int numSeg = Integer.parseInt(num.getText());
        if(numSeg == 0)
        {
            dispose();
            return;
        }
        Point current = ln.coordinates.get(pointIndex);
        current = new Point(current.x + 45, current.y + 45);
        for(int i = 1; i<numSeg+1; i++)
        {
            ln.coordinates.add(pointIndex + i, current);
            if(i%2 == 0)
            {
                current = new Point(current.x + 45, current.y + 45);
            }
            else if(i%2 == 1)
            {
                current = new Point(current.x + 45, current.y - 45);
            }
        }
        ln.coordinates.set(numSeg+pointIndex, current);
        canv.repaint();
        dispose();
    }//GEN-LAST:event_okaiActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InsertSegments.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InsertSegments.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InsertSegments.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InsertSegments.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InsertSegments().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton minus;
    private javax.swing.JTextField num;
    private javax.swing.JButton okai;
    private javax.swing.JButton plus;
    // End of variables declaration//GEN-END:variables
}
